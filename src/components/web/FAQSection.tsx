"use client";

import React, { useState } from 'react';
import { ChevronDown } from 'lucide-react';

interface FAQItem {
  id: number;
  question: string;
  answer: string;
}

const faqData: FAQItem[] = [
  {
    id: 1,
    question: "How do I use the TikTok Comment Generator?",
    answer: `To use the TikTok Comment Generator, follow these steps:
1. Paste the target content you want to comment on. This could be a video, post, or another comment.
2. Optionally, specify keywords you want in the comment, separated by commas.
3. Choose the type of comment from the eight available options: Thanks, Agree, Disagree, Question, Congrats, Answer, Angry, Joke. The default is Thanks.
4. Select the language for the comment. Supported languages are English, Chinese, German, and Spanish. The default is English.
5. Click the Generate button and wait for the comment to be created.
6. The generated comment will appear in the output textbox. You can then click the Copy button to copy the comment or edit it directly in the textbox.`
  },
  {
    id: 2,
    question: "Is the Comment Generator TikTok free to use?",
    answer: "Yes, the Comment Generator TikTok is completely free. You do not need to pay any fees to use this powerful tool."
  },
  {
    id: 3,
    question: "How does the TikTok Comment Generator work?",
    answer: "The tool uses artificial intelligence to generate comments. It analyzes the target content and creates a relevant comment based on the specified type and language."
  },
  {
    id: 4,
    question: "Are there any usage limits for the Comment Generator TikTok?",
    answer: "No, there are no usage limits. You can use the Comment Generator TikTok as many times as you want every day."
  },
  {
    id: 5,
    question: "Can I customize the comments generated by the TikTok Comment Generator?",
    answer: "Yes, you can customize the comments. After the comment is generated, it appears in the output textbox where you can edit it before copying and posting."
  },
  {
    id: 6,
    question: "Is it safe to use the TikTok Comment Generator?",
    answer: "Yes, it is safe to use. The tool does not perform any automation on TikTok independently. It generates comments for you to review and post manually, ensuring that your account remains secure and compliant with TikTok's guidelines."
  },
  {
    id: 7,
    question: "What types of comments can I generate with the Comment Generator TikTok?",
    answer: "You can generate eight types of comments: Thanks, Agree, Disagree, Question, Congrats, Answer, Angry, and Joke. This allows you to create a wide range of responses suitable for different contexts and interactions."
  },
  {
    id: 8,
    question: "Are the fake comments generated by TikTok Comment Generator legal to use?",
    answer: "Yes! The TikTok Comment Generator's fake comment feature is designed for content planning, mockups, and demonstrations only. Just remember to mark any fake screenshots as \"mock-up\" or \"example\" when sharing publicly."
  },
  {
    id: 9,
    question: "Why do my screenshots from TikTok Comment Generator look different from real TikTok?",
    answer: "Our TikTok Comment Generator automatically updates to match TikTok's latest design. If you notice any differences, make sure you're using the latest version of our tool. The design is refreshed regularly to maintain authenticity."
  },
  {
    id: 10,
    question: "Can I customize the engagement numbers in fake screenshots?",
    answer: "Absolutely! When creating fake comments with TikTok Comment Generator, you can adjust likes, replies, and posting time to make your mockups more realistic for your content planning needs."
  }
];

interface FAQItemProps {
  item: FAQItem;
  isOpen: boolean;
  onToggle: () => void;
}

const FAQItem: React.FC<FAQItemProps> = ({ item, isOpen, onToggle }) => {
  return (
    <div className="border-b border-[#f1f2f3] last:border-b-0">
      <button
        onClick={onToggle}
        className="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 rounded-lg cursor-pointer transition-colors"
      >
        <h3 className="text-lg font-medium pr-4 mb-0">{item.question}</h3>
        <ChevronDown 
          className={`w-4 h-4 transform transition-transform duration-300 ease-in-out flex-shrink-0 ${
            isOpen ? 'rotate-180' : ''
          }`}
        />
      </button>
      <div 
        className={`overflow-hidden transition-all duration-300 ease-in-out ${
          isOpen ? 'max-h-96' : 'max-h-0'
        }`}
      >
        <div className="px-6 pb-4 text-gray-600 whitespace-pre-line pt-4 bg-white">
          {item.answer}
        </div>
      </div>
    </div>
  );
};

export default function FAQSection() {
  const [openItems, setOpenItems] = useState<number[]>([]);

  const toggleItem = (id: number) => {
    setOpenItems(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  return (
    <section id="faq" className="py-16 bg-white">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-[20px] shadow-[0px_4px_10px_0px_rgba(0,0,0,0.1)] p-8">
            <div className="text-center mb-12">
              <h2 className="text-4xl font-semibold font-bold mb-4">
                Frequently Asked Questions
              </h2>
              <p className="text-gray-500 text-xl">FAQs</p>
            </div>
            <div className="max-w-3xl mx-auto">
              <div className="border rounded-lg bg-[#f9fafb]" style={{ borderColor: '#e1ecff' }}>
                {faqData.map((item) => (
                  <FAQItem
                    key={item.id}
                    item={item}
                    isOpen={openItems.includes(item.id)}
                    onToggle={() => toggleItem(item.id)}
                  />
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
